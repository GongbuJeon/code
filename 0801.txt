import './App.css';
import { React, useState, useRef, useEffect } from 'react';
let dataArr = []

function App() {

  // 임시 저장 state
  let [a, setA] = useState('');
  let [b, setB] = useState('');
  let [name, setName] = useState('');

  const intervalRef = useRef(null);
  const readingIndexRef = useRef(0);
  const [mode, setMode] = useState('sequential');
  const [isReading, setIsReading] = useState(false);

  const [randomarr, setRandomarr] = useState([]);
  const [time, setTime] = useState(2.5);

  useEffect(() => {

    if (localStorage.getItem('data') !== null) {
      dataArr = JSON.parse(localStorage.getItem('data'));
    }

    return () => {
      console.log(localStorage.getItem('data'))
    }
  }, [])

  const speakAllQuestionsAndAnswers = () => {
    let allText = '';
    let allText2 = '';
    dataArr.forEach(item => {
      Object.values(item).forEach(qnas => {
        qnas.forEach(qna => {
          // allText += `${qna.question}`;
          // allText2 += `${qna.answer} `;
          allText += `Question: ${qna.question}. Answer: ${qna.answer}. `;
        });
      });
    });

    if (allText) {
      speakText(allText, allText2);
    }
  };

  const speakText = (text, text2) => {
    if ('speechSynthesis' in window) {
      const synthesis = window.speechSynthesis;
      const utterance = new SpeechSynthesisUtterance(text);
      const utterance2 = new SpeechSynthesisUtterance(text2);
      synthesis.speak(utterance);
      setTimeout(() => {
        window.speechSynthesis.speak(utterance2);
      }, 2500);
    } else {
      console.log('Speech synthesis not supported');
    }
  };

  const shuffleArray = (array) => {

    const n = array.length;
    for (let i = n - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    setRandomarr([...array]); // 랜덤하게 뒤섞인 배열로 상태를 업데이트
    console.log(randomarr)
  };

  const handleShuffle = () => {
    // 배열을 랜덤하게 뒤섞기 위해 shuffleArray 함수를 호출
    shuffleArray([...dataArr]);
  };

  const handleStartReading = () => {
    if (window.speechSynthesis && !isReading) {
      setIsReading(true);
      // 객체 읽기를 시작
      console.log(isReading)
      readArray();
      
    }
  };

  const handleStopReading = () => {
    if (isReading) {
      setIsReading(false);
      window.speechSynthesis.cancel();
      console.log(1)
    }
  };

// if isreading(false) == break

  const readArray = () => {

    if (mode == 'sequential') {
      
      setIsReading(true);
      console.log(isReading)
      
      const currentIndex = readingIndexRef.current;
      if (currentIndex < dataArr.length) {
        const reading = `${dataArr[currentIndex].question}`
        const reading2 = `${dataArr[currentIndex].answer}`
        const utterance = new SpeechSynthesisUtterance(reading);
        const utterance2 = new SpeechSynthesisUtterance(reading2);
        window.speechSynthesis.speak(utterance);
        
        setTimeout(() => {
          window.speechSynthesis.speak(utterance2);
        }, 2500);

        intervalRef.current = setTimeout(() => {
          readingIndexRef.current = currentIndex + 1;
          readArray();
        }, time * 1000 + 2500);

        if (!isReading) {
          console.log('발동')
          window.speechSynthesis.cancel();
        }
      }

      else {
        readingIndexRef.current = 0;
        readArray();
      }
    }

    else {

      const currentIndex = readingIndexRef.current;
      if (currentIndex < randomarr.length) {
        const reading = `${randomarr[currentIndex].question}`
        const reading2 = `${randomarr[currentIndex].answer}`
        const utterance = new SpeechSynthesisUtterance(reading);
        const utterance2 = new SpeechSynthesisUtterance(reading2);
        window.speechSynthesis.speak(utterance);
        setTimeout(() => {
          window.speechSynthesis.speak(utterance2);
        }, 2500);

        intervalRef.current = setTimeout(() => {
          readingIndexRef.current = currentIndex + 1;
          readArray();
        }, time * 1000 + 2500);
      }

      else {
        readingIndexRef.current = 0;
        readArray();
      }
    }
  }

  const Buttonchange = () => {
    if (mode =='sequential') {
      setMode('random')
      document.querySelector('.off').classList.toggle('on-off')
      document.querySelector('.off2').classList.toggle('on-off')
    }

    else if (mode == 'random') {
      setMode('sequential')
      document.querySelector('.off').classList.toggle('on-off')
      document.querySelector('.off2').classList.toggle('on-off')
    }
  }

  function findValueByKey(array, key) {
    for (const obj1 of array) {
      if (key in obj1) {
        return obj1[key];
      }
    }
    return null; // 키를 찾지 못한 경우
  }
  


  return (
    <>

      <div>
        <button className='off on-off'
          onClick={Buttonchange}>
          순차재생</button>

        <button className='off2'
          onClick={() => {
            Buttonchange()
            handleShuffle()
          }}>
          랜덤재생</button>
      </div>

      <div>
        <input value={time}
          onChange={(e) => { setTime(e.target.value) }}
        ></input>
        <button>문답 사이 시간 설정</button>
      </div>

      <div>
        <input placeholder='그룹'
        value={name}
        onChange={(e) => { setName(e.target.value) }}
        ></input>

        {/* <button className='off3'
        onClick={()=>{
          document.querySelector('.off3').classList.toggle('on-off')
          // if classname off3 on-off
          // onchange된 input의 이름을 key값으로 지정하는 오브젝트를 만듬.
        }}>분류하기</button> */}
      </div>


      <div>

        <input
          placeholder='질문'
          value={a}
          onChange={(e) => { setA(e.target.value) }}
        ></input>

        <button onClick={() => {

          if (name == '') {
            alert('그룹을 지정해 주세요.')
          }

          else {
            const obj = { 'question': a, 'answer': b }

            if (findValueByKey(dataArr, name) == null) {

              const groupObj = {}
              groupObj[name] = [obj];
              dataArr.push(groupObj)
              
              console.log(name, groupObj, dataArr, mode)

            }
            else {
              findValueByKey(dataArr, name).push(obj)
              console.log(1)
              // dataArr의 오브젝트들 중 이름이 name인 object를 찾아서 그 밸류값인 배열에 obj를 푸쉬
            }

            // const aa = [...dataArr]
            // aa.push(obj);
            // setdataArr(aa);
            // dataArr.push(obj);

            console.log(2)
            localStorage.setItem('data', JSON.stringify(dataArr));

            // 그룹별로 다른 데이터 형식으로 저장 + 화면에 보여주기
            // if (dataArr && Object.keys(dataArr).some(key => { return (key == name) })) {
            //   const grobj = {name : dataArr}
            // }
            // if name 이 없으면
            // {그룹이름 : dataArr}
            
            // else {
            //   Array
            // }
            
            // 그룹이 있으면
            // 그룹이름의 value 배열에 push

            // [{그룹이름 : dataArr}, {그룹이름2 : dataArr}]의 형태로 로컬스토리지에 저장

            // 입력창 초기화
            setA('')
            setB('')
          }

        }}>입력하기</button>


        <button onClick={speakAllQuestionsAndAnswers}>음성</button>

      </div>


      <div>

        <input placeholder='답'
          value={b}
          onChange={(e) => { setB(e.target.value) }}
        ></input>

        <button onClick={handleStopReading}>음성중지</button>

        <button onClick={()=>{
          console.log(Object.values(dataArr[0])[0][2].question)
        }}>test</button>

      </div>

        {/* 배열의 수만큼 반복해서 안의 내용을 화면에 보여주기 */}

      <div>
        {dataArr.map((item, index) => {
          return (
            <div key={index}>
              {Object.keys(item).map(key => (
                <div key={key}>
                  <h3>{key}</h3>
                  <ul>
                    {item[key].map((qna, qnaIndex) => (
                      <li key={qnaIndex}>
                        질문: {qna.question}, 답: {qna.answer}
                        <button 
                        style={{marginLeft : '10px'}}
                        >편집</button>
                        <button
                        onClick={()=>{
                          console.log(qna)
                        }}
                        >삭제</button>
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>
          );
        })}
      </div>
    </>
  );
}

export default App;

// [  { name1 : [{question : a, answer : b}, {question : c, answer : d}] }, { name2 : [{question : a, answer : b}, {question : c, answer : d}] } ]
// 전체이름 data : [] (dataArr)
// 

// 재생정지 버튼 작동하게 하기 
// 사용자 지정 시간 설정
// 음성버튼 누르면 음성정지 버튼으로 변경하기

// 그룹핑
// 배열 키값
// 편집
// 삭제

// 사실상 처음부터 다시 짰음 데이터 구조가 달라서
// 이것저것 생각해봤는데 안됨
// 데이터 구조가 반복문을 세번 써야 되고 막그럼
// chatgpt 한테 물어봄 -> 물어봐서 코드 붙여씀
// 근데 그 코드에 맞춰서 써야되는데 응용하기가 어려움
// 그래서 또 물어봄 
// 현타가 옴
